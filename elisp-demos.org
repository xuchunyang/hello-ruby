#+PROPERTY: header-args:elisp :results pp :exports both :eval never-export

* x-server-version

#+BEGIN_SRC elisp
(x-server-version)
#+END_SRC

#+RESULTS:
: (10 14 5)

* xml-get-children

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert
   "<info>"
   "<user id=\"1\"><name>Bob</name></user>"
   "<user id=\"2\"><name>Joe</name></user>"
   "</info>")
  (let ((x (xml-parse-region)))
    (xml-get-children (assq 'info x) 'user)))
#+END_SRC

#+RESULTS:
: ((user
:   ((id . "1"))
:   (name nil "Bob"))
:  (user
:   ((id . "2"))
:   (name nil "Joe")))

#+BEGIN_SRC elisp
(xml-get-children
 '(info
   nil
   (user nil "Bob")
   (user nil "Joe"))
 'user)
#+END_SRC

#+RESULTS:
: ((user nil "Bob")
:  (user nil "Joe"))

* xml-node-attributes

#+BEGIN_SRC elisp
(xml-node-attributes
 '(user
   ((id . "1"))
   (name nil "Bob")))
#+END_SRC

#+RESULTS:
: ((id . "1"))

* xml-node-children

#+BEGIN_SRC elisp
(xml-node-children
 '(user
   ((id . "1"))
   (name nil "Bob")))
#+END_SRC

#+RESULTS:
: ((name nil "Bob"))

* xml-node-name

#+BEGIN_SRC elisp
(xml-node-name
 '(user
   ((id . "1"))
   (name nil "Bob")))
#+END_SRC

#+RESULTS:
: user

* xml-parse-file

#+BEGIN_SRC elisp
(let ((file (make-temp-file "elisp-demos-")))
  (write-region "<note>hello world!</note>" nil file)
  (unwind-protect
      (xml-parse-file file)
    (delete-file file)))
#+END_SRC

#+RESULTS:
: ((note nil "hello world!"))

* xml-parse-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "\
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<note>
  <to>Tove</to>
  <from>Jani</from>
  <heading>Reminder</heading>
  <body>Don't forget me this weekend!</body>
</note>")
  (xml-parse-region))
#+END_SRC

#+RESULTS:
: ((note nil "\n  "
:        (to nil "Tove")
:        "\n  "
:        (from nil "Jani")
:        "\n  "
:        (heading nil "Reminder")
:        "\n  "
:        (body nil "Don't forget me this weekend!")
:        "\n"))

* xmlgen

#+BEGIN_SRC elisp :results value raw :wrap EXAMPLE
((lambda (string)
   "Prettify HTML in STRING."
   (with-temp-buffer
     (insert string)
     (html-mode)
     (sgml-pretty-print (point-min) (point-max))
     (buffer-string)))
 (xmlgen '(html
           (head
            (title "Example Domain")
            (meta :charset "utf-8"))
           (body
            (h1 "Example Domain")
            (p "This domain...")
            (p (a :href "http://www.iana.org/domains/example" "More information..."))))))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
<html>
  <head>
    <title>Example Domain
    </title>
    <meta charset="utf-8"/>
  </head>
  <body>
    <h1>Example Domain
    </h1>
    <p>This domain...
    </p>
    <p>
      <a href="http://www.iana.org/domains/example">More information...
      </a>
    </p>
  </body>
</html>
#+END_EXAMPLE

* xor

#+BEGIN_SRC elisp
(list (xor nil t)
      (xor t nil)
      (xor nil nil)
      (xor t t))
#+END_SRC

#+RESULTS:
: (t t nil nil)

* xr

#+BEGIN_SRC elisp
(xr "\\.\\(?:mp4\\|mp3\\)\\'")
#+END_SRC

#+RESULTS:
: (seq "."
:      (or "mp4" "mp3")
:      eos)

* y-or-n-p

#+BEGIN_SRC elisp
(y-or-n-p "Are you ready? ")
#+END_SRC

#+RESULTS:
: t

* y-or-n-p-with-timeout

#+BEGIN_SRC elisp
(y-or-n-p-with-timeout "Are you ready? " 3 'default)
#+END_SRC

#+RESULTS:
: default

* yes-or-no-p

#+BEGIN_SRC elisp
(yes-or-no-p "Are you ready? ")
#+END_SRC

#+RESULTS:
: t

* zerop

#+BEGIN_SRC elisp
(zerop 0)
#+END_SRC

#+RESULTS:
: t

